digraph {
	dpi=1000 fontsize=12 nodesep=0.6 rankdir=TB ranksep=0.3 size="5,5"
	"1_line_void GlaAnPin_PosLoad_Update(void)" [label="void GlaAnPin_PosLoad_Update(void)" fillcolor="#75FB94" shape=box style=filled]
	"3_line_static uint8 PosLoadInitEnablePrv = 0;" [label="static uint8 PosLoadInitEnablePrv = 0;" fillcolor="#DAE8FC" shape=box style=filled]
	"1_line_void GlaAnPin_PosLoad_Update(void)" -> "3_line_static uint8 PosLoadInitEnablePrv = 0;" [label=""]
	"4_line_uint16 i, Seq, Var, Target, LoadData, LoadData_CH_A;" [label="uint16 i, Seq, Var, Target, LoadData, LoadData_CH_A;" fillcolor="#DAE8FC" shape=box style=filled]
	"3_line_static uint8 PosLoadInitEnablePrv = 0;" -> "4_line_uint16 i, Seq, Var, Target, LoadData, LoadData_CH_A;" [label=""]
	"5_if_App_Monitor_gstGlaAnPin.u8PosLoadInitEnable == HIGH" [label="App_Monitor_gstGlaAnPin.u8PosLoadInitEnable == HIGH" fillcolor="#F8CECC" shape=diamond style=filled]
	"4_line_uint16 i, Seq, Var, Target, LoadData, LoadData_CH_A;" -> "5_if_App_Monitor_gstGlaAnPin.u8PosLoadInitEnable == HIGH"
	"7_if_App_Monitor_gstGlaAnPin.u8PosLoadInitEnable > PosLoadInitEnablePrv" [label="App_Monitor_gstGlaAnPin.u8PosLoadInitEnable > PosLoadInitEnablePrv" fillcolor="#F8CECC" shape=diamond style=filled]
	"5_if_App_Monitor_gstGlaAnPin.u8PosLoadInitEnable == HIGH" -> "7_if_App_Monitor_gstGlaAnPin.u8PosLoadInitEnable > PosLoadInitEnablePrv"
	"9_line_App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev = 0;" [label="App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev = 0;" fillcolor="#DAE8FC" shape=box style=filled]
	"7_if_App_Monitor_gstGlaAnPin.u8PosLoadInitEnable > PosLoadInitEnablePrv" -> "9_line_App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev = 0;" [label=True]
	"10_line_u8AddressMark = 0;" [label="u8AddressMark = 0;" fillcolor="#DAE8FC" shape=box style=filled]
	"9_line_App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev = 0;" -> "10_line_u8AddressMark = 0;" [label=""]
	"13_line_App_Monitor_gstGlaAnPin.u16PosLoadAddr = (GLA_HALL_PARA_OPEN_ADDR - App_Monitor_gstGlaPosMon.u16MechHall_Position) / App_Monitor_gstGlaAnPin.u16PosLoadHallInterval;" [label="App_Monitor_gstGlaAnPin.u16PosLoadAddr = (GLA_HALL_PARA_OPEN_ADDR - App_Monitor_gstGlaPosMon.u16MechHall_Position) / App_Monitor_gstGlaAnPin.u16PosLoadHallInterval;" fillcolor="#DAE8FC" shape=box style=filled]
	"7_if_App_Monitor_gstGlaAnPin.u8PosLoadInitEnable > PosLoadInitEnablePrv" -> "13_line_App_Monitor_gstGlaAnPin.u16PosLoadAddr = (GLA_HALL_PARA_OPEN_ADDR - App_Monitor_gstGlaPosMon.u16MechHall_Position) / App_Monitor_gstGlaAnPin.u16PosLoadHallInterval;" [label=False]
	"10_line_u8AddressMark = 0;" -> "13_line_App_Monitor_gstGlaAnPin.u16PosLoadAddr = (GLA_HALL_PARA_OPEN_ADDR - App_Monitor_gstGlaPosMon.u16MechHall_Position) / App_Monitor_gstGlaAnPin.u16PosLoadHallInterval;" [label=""]
	"14_if_App_Monitor_gstGlaPosMon.u16MechHall_Position <= GLA_HALL_PARA_CLOSE_STOP" [label="App_Monitor_gstGlaPosMon.u16MechHall_Position <= GLA_HALL_PARA_CLOSE_STOP" fillcolor="#F8CECC" shape=diamond style=filled]
	"13_line_App_Monitor_gstGlaAnPin.u16PosLoadAddr = (GLA_HALL_PARA_OPEN_ADDR - App_Monitor_gstGlaPosMon.u16MechHall_Position) / App_Monitor_gstGlaAnPin.u16PosLoadHallInterval;" -> "14_if_App_Monitor_gstGlaPosMon.u16MechHall_Position <= GLA_HALL_PARA_CLOSE_STOP"
	"16_line_gbSeqVariable = App_Monitor_gstGlaAnPin.u16PosLoadAddr - App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev;" [label="gbSeqVariable = App_Monitor_gstGlaAnPin.u16PosLoadAddr - App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev;" fillcolor="#DAE8FC" shape=box style=filled]
	"14_if_App_Monitor_gstGlaPosMon.u16MechHall_Position <= GLA_HALL_PARA_CLOSE_STOP" -> "16_line_gbSeqVariable = App_Monitor_gstGlaAnPin.u16PosLoadAddr - App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev;" [label=True]
	"17_line_gwAddrVariable = (GLA_HALL_PARA_OPEN_ADDR - ((App_Monitor_gstGlaAnPin.u16PosLoadAddr) * LOADBUFF_HALLCNT));" [label="gwAddrVariable = (GLA_HALL_PARA_OPEN_ADDR - ((App_Monitor_gstGlaAnPin.u16PosLoadAddr) * LOADBUFF_HALLCNT));" fillcolor="#DAE8FC" shape=box style=filled]
	"16_line_gbSeqVariable = App_Monitor_gstGlaAnPin.u16PosLoadAddr - App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev;" -> "17_line_gwAddrVariable = (GLA_HALL_PARA_OPEN_ADDR - ((App_Monitor_gstGlaAnPin.u16PosLoadAddr) * LOADBUFF_HALLCNT));" [label=""]
	"18_for_init_Seq = 0" [label="Seq = 0" fillcolor="#DAE8FC" shape=box style=filled]
	"18_for_init_Seq < gbSeqVariable" [label=" Seq < gbSeqVariable" fillcolor="#F8CECC" shape=diamond style=filled]
	"18_for_init_Seq++" [label=" Seq++" fillcolor="#DAE8FC" shape=box style=filled]
	"17_line_gwAddrVariable = (GLA_HALL_PARA_OPEN_ADDR - ((App_Monitor_gstGlaAnPin.u16PosLoadAddr) * LOADBUFF_HALLCNT));" -> "18_for_init_Seq = 0"
	"18_for_init_Seq = 0" -> "18_for_init_Seq < gbSeqVariable"
	"18_for_init_Seq++" -> "18_for_init_Seq < gbSeqVariable"
	"20_line_Target = (gwAddrVariable + LOADBUFF_HALLCNT);" [label="Target = (gwAddrVariable + LOADBUFF_HALLCNT);" fillcolor="#DAE8FC" shape=box style=filled]
	"18_for_init_Seq < gbSeqVariable" -> "20_line_Target = (gwAddrVariable + LOADBUFF_HALLCNT);" [label=True]
	"21_for_init_Var = gwAddrVariable" [label="Var = gwAddrVariable" fillcolor="#DAE8FC" shape=box style=filled]
	"21_for_init_Var < Target" [label=" Var < Target" fillcolor="#F8CECC" shape=diamond style=filled]
	"21_for_init_Var++" [label=" Var++" fillcolor="#DAE8FC" shape=box style=filled]
	"20_line_Target = (gwAddrVariable + LOADBUFF_HALLCNT);" -> "21_for_init_Var = gwAddrVariable"
	"21_for_init_Var = gwAddrVariable" -> "21_for_init_Var < Target"
	"21_for_init_Var++" -> "21_for_init_Var < Target"
	"23_line_LoadData_CH_A = (gb_CH_A_HallSpeedFilt[Var] + (gb_CH_A_HallSpeed[Var] * 100));" [label="LoadData_CH_A = (gb_CH_A_HallSpeedFilt[Var] + (gb_CH_A_HallSpeed[Var] * 100));" fillcolor="#DAE8FC" shape=box style=filled]
	"21_for_init_Var < Target" -> "23_line_LoadData_CH_A = (gb_CH_A_HallSpeedFilt[Var] + (gb_CH_A_HallSpeed[Var] * 100));" [label=True]
	"24_line_u16DataBufTest[Var - gwAddrVariable] = LoadData_CH_A;" [label="u16DataBufTest[Var - gwAddrVariable] = LoadData_CH_A;" fillcolor="#DAE8FC" shape=box style=filled]
	"23_line_LoadData_CH_A = (gb_CH_A_HallSpeedFilt[Var] + (gb_CH_A_HallSpeed[Var] * 100));" -> "24_line_u16DataBufTest[Var - gwAddrVariable] = LoadData_CH_A;" [label=""]
	"24_line_u16DataBufTest[Var - gwAddrVariable] = LoadData_CH_A;" -> "21_for_init_Var++"
	"27_line_gwAddrVariable = Target;" [label="gwAddrVariable = Target;" fillcolor="#DAE8FC" shape=box style=filled]
	"21_for_init_Var < Target" -> "27_line_gwAddrVariable = Target;" [label=False]
	"28_line_gbAddrUpdate = (Seq);" [label="gbAddrUpdate = (Seq);" fillcolor="#DAE8FC" shape=box style=filled]
	"27_line_gwAddrVariable = Target;" -> "28_line_gbAddrUpdate = (Seq);" [label=""]
	"29_line_u16DataBuffAVG_prev = (gb_CH_A_HallSpeedFilt[Var + 1] + (gb_CH_A_HallSpeed[Var + 1] * 100));" [label="u16DataBuffAVG_prev = (gb_CH_A_HallSpeedFilt[Var + 1] + (gb_CH_A_HallSpeed[Var + 1] * 100));" fillcolor="#DAE8FC" shape=box style=filled]
	"28_line_gbAddrUpdate = (Seq);" -> "29_line_u16DataBuffAVG_prev = (gb_CH_A_HallSpeedFilt[Var + 1] + (gb_CH_A_HallSpeed[Var + 1] * 100));" [label=""]
	"30_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate] = u16DataBuffAVG;" [label="App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate] = u16DataBuffAVG;" fillcolor="#DAE8FC" shape=box style=filled]
	"29_line_u16DataBuffAVG_prev = (gb_CH_A_HallSpeedFilt[Var + 1] + (gb_CH_A_HallSpeed[Var + 1] * 100));" -> "30_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate] = u16DataBuffAVG;" [label=""]
	"31_line_s8PosLoadBuff_Voltage[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = s16Volt_Comp / 100;" [label="s8PosLoadBuff_Voltage[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = s16Volt_Comp / 100;" fillcolor="#DAE8FC" shape=box style=filled]
	"30_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate] = u16DataBuffAVG;" -> "31_line_s8PosLoadBuff_Voltage[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = s16Volt_Comp / 100;" [label=""]
	"32_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_1 = GlaAnpin_Load_Data_Offset_1_Calc(s16Volt_Comp);" [label="App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_1 = GlaAnpin_Load_Data_Offset_1_Calc(s16Volt_Comp);" fillcolor="#DAE8FC" shape=box style=filled]
	"31_line_s8PosLoadBuff_Voltage[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = s16Volt_Comp / 100;" -> "32_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_1 = GlaAnpin_Load_Data_Offset_1_Calc(s16Volt_Comp);" [label=""]
	"33_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_2 = GlaAnpin_Load_Data_Offset_2_Calc(s16Volt_Comp);" [label="App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_2 = GlaAnpin_Load_Data_Offset_2_Calc(s16Volt_Comp);" fillcolor="#DAE8FC" shape=box style=filled]
	"32_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_1 = GlaAnpin_Load_Data_Offset_1_Calc(s16Volt_Comp);" -> "33_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_2 = GlaAnpin_Load_Data_Offset_2_Calc(s16Volt_Comp);" [label=""]
	"34_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Scale = GlaAnpin_Load_Data_Scale_Calc(s16Volt_Comp);" [label="App_Monitor_gstGlaAnPin.s16PosLoadBuff_Scale = GlaAnpin_Load_Data_Scale_Calc(s16Volt_Comp);" fillcolor="#DAE8FC" shape=box style=filled]
	"33_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_2 = GlaAnpin_Load_Data_Offset_2_Calc(s16Volt_Comp);" -> "34_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Scale = GlaAnpin_Load_Data_Scale_Calc(s16Volt_Comp);" [label=""]
	"35_if_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] == 0" [label="App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] == 0" fillcolor="#F8CECC" shape=diamond style=filled]
	"34_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Scale = GlaAnpin_Load_Data_Scale_Calc(s16Volt_Comp);" -> "35_if_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] == 0"
	"37_line_u32gb_Load_Scale = 0;" [label="u32gb_Load_Scale = 0;" fillcolor="#DAE8FC" shape=box style=filled]
	"35_if_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] == 0" -> "37_line_u32gb_Load_Scale = 0;" [label=True]
	"38_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = 0;" [label="App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = 0;" fillcolor="#DAE8FC" shape=box style=filled]
	"37_line_u32gb_Load_Scale = 0;" -> "38_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = 0;" [label=""]
	"41_else" [label=else fillcolor="#F8CECC" shape=diamond style=filled]
	"35_if_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] == 0" -> "41_else" [label=False]
	"43_line_u32gb_Load_Scale = ((App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] + App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_1) * App_Monitor_gstGlaAnPin.s16PosLoadBuff_Scale);" [label="u32gb_Load_Scale = ((App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] + App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_1) * App_Monitor_gstGlaAnPin.s16PosLoadBuff_Scale);" fillcolor="#DAE8FC" shape=box style=filled]
	"41_else" -> "43_line_u32gb_Load_Scale = ((App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] + App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_1) * App_Monitor_gstGlaAnPin.s16PosLoadBuff_Scale);" [label=True]
	"44_line_u16CalcData = (u32gb_Load_Scale / 1000) + App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_2;" [label="u16CalcData = (u32gb_Load_Scale / 1000) + App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_2;" fillcolor="#DAE8FC" shape=box style=filled]
	"43_line_u32gb_Load_Scale = ((App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] + App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_1) * App_Monitor_gstGlaAnPin.s16PosLoadBuff_Scale);" -> "44_line_u16CalcData = (u32gb_Load_Scale / 1000) + App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_2;" [label=""]
	"45_if_u16CalcData >= 255" [label="u16CalcData >= 255" fillcolor="#F8CECC" shape=diamond style=filled]
	"44_line_u16CalcData = (u32gb_Load_Scale / 1000) + App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_2;" -> "45_if_u16CalcData >= 255"
	"47_line_u16CalcData = 255;" [label="u16CalcData = 255;" fillcolor="#DAE8FC" shape=box style=filled]
	"45_if_u16CalcData >= 255" -> "47_line_u16CalcData = 255;" [label=True]
	"50_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = u16CalcData;" [label="App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = u16CalcData;" fillcolor="#DAE8FC" shape=box style=filled]
	"45_if_u16CalcData >= 255" -> "50_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = u16CalcData;" [label=False]
	"47_line_u16CalcData = 255;" -> "50_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = u16CalcData;" [label=""]
	"53_line_App_Monitor_gstGlaAnPin.s16PosLoadSum_CH_A = 0;" [label="App_Monitor_gstGlaAnPin.s16PosLoadSum_CH_A = 0;" fillcolor="#DAE8FC" shape=box style=filled]
	"38_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = 0;" -> "53_line_App_Monitor_gstGlaAnPin.s16PosLoadSum_CH_A = 0;" [label=False]
	"50_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = u16CalcData;" -> "53_line_App_Monitor_gstGlaAnPin.s16PosLoadSum_CH_A = 0;" [label=""]
	"53_line_App_Monitor_gstGlaAnPin.s16PosLoadSum_CH_A = 0;" -> "18_for_init_Seq++"
	"56_line_gbLoadUpdate = ON;" [label="gbLoadUpdate = ON;" fillcolor="#DAE8FC" shape=box style=filled]
	"18_for_init_Seq < gbSeqVariable" -> "56_line_gbLoadUpdate = ON;" [label=False]
	"57_line_gbAddrUpdate = 0;" [label="gbAddrUpdate = 0;" fillcolor="#DAE8FC" shape=box style=filled]
	"56_line_gbLoadUpdate = ON;" -> "57_line_gbAddrUpdate = 0;" [label=""]
	"58_line_GlaAnPin_PosLoad_UpdateInit();" [label="GlaAnPin_PosLoad_UpdateInit();" fillcolor="#DAE8FC" shape=box style=filled]
	"57_line_gbAddrUpdate = 0;" -> "58_line_GlaAnPin_PosLoad_UpdateInit();" [label=""]
	"61_else" [label=else fillcolor="#F8CECC" shape=diamond style=filled]
	"14_if_App_Monitor_gstGlaPosMon.u16MechHall_Position <= GLA_HALL_PARA_CLOSE_STOP" -> "61_else" [label=False]
	"63_if_App_Monitor_gstGlaAnPin.u16PosLoadAddr != App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev" [label="App_Monitor_gstGlaAnPin.u16PosLoadAddr != App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev" fillcolor="#F8CECC" shape=diamond style=filled]
	"61_else" -> "63_if_App_Monitor_gstGlaAnPin.u16PosLoadAddr != App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev"
	"65_if_u8AddressMark == 0" [label="u8AddressMark == 0" fillcolor="#F8CECC" shape=diamond style=filled]
	"63_if_App_Monitor_gstGlaAnPin.u16PosLoadAddr != App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev" -> "65_if_u8AddressMark == 0"
	"67_line_u16StartAddress = App_Monitor_gstGlaAnPin.u16PosLoadAddr;" [label="u16StartAddress = App_Monitor_gstGlaAnPin.u16PosLoadAddr;" fillcolor="#DAE8FC" shape=box style=filled]
	"65_if_u8AddressMark == 0" -> "67_line_u16StartAddress = App_Monitor_gstGlaAnPin.u16PosLoadAddr;" [label=True]
	"68_line_u8AddressMark = 1;" [label="u8AddressMark = 1;" fillcolor="#DAE8FC" shape=box style=filled]
	"67_line_u16StartAddress = App_Monitor_gstGlaAnPin.u16PosLoadAddr;" -> "68_line_u8AddressMark = 1;" [label=""]
	"71_line_gbSeqVariable = App_Monitor_gstGlaAnPin.u16PosLoadAddr - App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev;" [label="gbSeqVariable = App_Monitor_gstGlaAnPin.u16PosLoadAddr - App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev;" fillcolor="#DAE8FC" shape=box style=filled]
	"65_if_u8AddressMark == 0" -> "71_line_gbSeqVariable = App_Monitor_gstGlaAnPin.u16PosLoadAddr - App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev;" [label=False]
	"68_line_u8AddressMark = 1;" -> "71_line_gbSeqVariable = App_Monitor_gstGlaAnPin.u16PosLoadAddr - App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev;" [label=""]
	"72_line_gwAddrVariable = (GLA_HALL_PARA_OPEN_ADDR - ((App_Monitor_gstGlaAnPin.u16PosLoadAddr) * LOADBUFF_HALLCNT));" [label="gwAddrVariable = (GLA_HALL_PARA_OPEN_ADDR - ((App_Monitor_gstGlaAnPin.u16PosLoadAddr) * LOADBUFF_HALLCNT));" fillcolor="#DAE8FC" shape=box style=filled]
	"71_line_gbSeqVariable = App_Monitor_gstGlaAnPin.u16PosLoadAddr - App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev;" -> "72_line_gwAddrVariable = (GLA_HALL_PARA_OPEN_ADDR - ((App_Monitor_gstGlaAnPin.u16PosLoadAddr) * LOADBUFF_HALLCNT));" [label=""]
	"73_for_init_Seq = 0" [label="Seq = 0" fillcolor="#DAE8FC" shape=box style=filled]
	"73_for_init_Seq < gbSeqVariable" [label=" Seq < gbSeqVariable" fillcolor="#F8CECC" shape=diamond style=filled]
	"73_for_init_Seq++" [label=" Seq++" fillcolor="#DAE8FC" shape=box style=filled]
	"72_line_gwAddrVariable = (GLA_HALL_PARA_OPEN_ADDR - ((App_Monitor_gstGlaAnPin.u16PosLoadAddr) * LOADBUFF_HALLCNT));" -> "73_for_init_Seq = 0"
	"73_for_init_Seq = 0" -> "73_for_init_Seq < gbSeqVariable"
	"73_for_init_Seq++" -> "73_for_init_Seq < gbSeqVariable"
	"75_line_Target = (gwAddrVariable + LOADBUFF_HALLCNT);" [label="Target = (gwAddrVariable + LOADBUFF_HALLCNT);" fillcolor="#DAE8FC" shape=box style=filled]
	"73_for_init_Seq < gbSeqVariable" -> "75_line_Target = (gwAddrVariable + LOADBUFF_HALLCNT);" [label=True]
	"76_for_init_Var = gwAddrVariable" [label="Var = gwAddrVariable" fillcolor="#DAE8FC" shape=box style=filled]
	"76_for_init_Var < Target" [label=" Var < Target" fillcolor="#F8CECC" shape=diamond style=filled]
	"76_for_init_Var++" [label=" Var++" fillcolor="#DAE8FC" shape=box style=filled]
	"75_line_Target = (gwAddrVariable + LOADBUFF_HALLCNT);" -> "76_for_init_Var = gwAddrVariable"
	"76_for_init_Var = gwAddrVariable" -> "76_for_init_Var < Target"
	"76_for_init_Var++" -> "76_for_init_Var < Target"
	"78_line_LoadData_CH_A = (gb_CH_A_HallSpeedFilt[Var] + (gb_CH_A_HallSpeed[Var] * 100));" [label="LoadData_CH_A = (gb_CH_A_HallSpeedFilt[Var] + (gb_CH_A_HallSpeed[Var] * 100));" fillcolor="#DAE8FC" shape=box style=filled]
	"76_for_init_Var < Target" -> "78_line_LoadData_CH_A = (gb_CH_A_HallSpeedFilt[Var] + (gb_CH_A_HallSpeed[Var] * 100));" [label=True]
	"79_line_u16DataBufTest[Var - gwAddrVariable] = LoadData_CH_A;" [label="u16DataBufTest[Var - gwAddrVariable] = LoadData_CH_A;" fillcolor="#DAE8FC" shape=box style=filled]
	"78_line_LoadData_CH_A = (gb_CH_A_HallSpeedFilt[Var] + (gb_CH_A_HallSpeed[Var] * 100));" -> "79_line_u16DataBufTest[Var - gwAddrVariable] = LoadData_CH_A;" [label=""]
	"79_line_u16DataBufTest[Var - gwAddrVariable] = LoadData_CH_A;" -> "76_for_init_Var++"
	"82_line_gwAddrVariable = Target;" [label="gwAddrVariable = Target;" fillcolor="#DAE8FC" shape=box style=filled]
	"76_for_init_Var < Target" -> "82_line_gwAddrVariable = Target;" [label=False]
	"83_line_gbAddrUpdate = (Seq);" [label="gbAddrUpdate = (Seq);" fillcolor="#DAE8FC" shape=box style=filled]
	"82_line_gwAddrVariable = Target;" -> "83_line_gbAddrUpdate = (Seq);" [label=""]
	"84_line_u16DataBuffAVG_prev = (gb_CH_A_HallSpeedFilt[Var + 1] + (gb_CH_A_HallSpeed[Var + 1] * 100));" [label="u16DataBuffAVG_prev = (gb_CH_A_HallSpeedFilt[Var + 1] + (gb_CH_A_HallSpeed[Var + 1] * 100));" fillcolor="#DAE8FC" shape=box style=filled]
	"83_line_gbAddrUpdate = (Seq);" -> "84_line_u16DataBuffAVG_prev = (gb_CH_A_HallSpeedFilt[Var + 1] + (gb_CH_A_HallSpeed[Var + 1] * 100));" [label=""]
	"85_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate] = u16DataBuffAVG;" [label="App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate] = u16DataBuffAVG;" fillcolor="#DAE8FC" shape=box style=filled]
	"84_line_u16DataBuffAVG_prev = (gb_CH_A_HallSpeedFilt[Var + 1] + (gb_CH_A_HallSpeed[Var + 1] * 100));" -> "85_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate] = u16DataBuffAVG;" [label=""]
	"86_line_s8PosLoadBuff_Voltage[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = s16Volt_Comp / 100;" [label="s8PosLoadBuff_Voltage[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = s16Volt_Comp / 100;" fillcolor="#DAE8FC" shape=box style=filled]
	"85_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate] = u16DataBuffAVG;" -> "86_line_s8PosLoadBuff_Voltage[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = s16Volt_Comp / 100;" [label=""]
	"87_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_1 = GlaAnpin_Load_Data_Offset_1_Calc(s16Volt_Comp);" [label="App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_1 = GlaAnpin_Load_Data_Offset_1_Calc(s16Volt_Comp);" fillcolor="#DAE8FC" shape=box style=filled]
	"86_line_s8PosLoadBuff_Voltage[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = s16Volt_Comp / 100;" -> "87_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_1 = GlaAnpin_Load_Data_Offset_1_Calc(s16Volt_Comp);" [label=""]
	"88_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_2 = GlaAnpin_Load_Data_Offset_2_Calc(s16Volt_Comp);" [label="App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_2 = GlaAnpin_Load_Data_Offset_2_Calc(s16Volt_Comp);" fillcolor="#DAE8FC" shape=box style=filled]
	"87_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_1 = GlaAnpin_Load_Data_Offset_1_Calc(s16Volt_Comp);" -> "88_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_2 = GlaAnpin_Load_Data_Offset_2_Calc(s16Volt_Comp);" [label=""]
	"89_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Scale = GlaAnpin_Load_Data_Scale_Calc(s16Volt_Comp);" [label="App_Monitor_gstGlaAnPin.s16PosLoadBuff_Scale = GlaAnpin_Load_Data_Scale_Calc(s16Volt_Comp);" fillcolor="#DAE8FC" shape=box style=filled]
	"88_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_2 = GlaAnpin_Load_Data_Offset_2_Calc(s16Volt_Comp);" -> "89_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Scale = GlaAnpin_Load_Data_Scale_Calc(s16Volt_Comp);" [label=""]
	"90_if_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] == 0" [label="App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] == 0" fillcolor="#F8CECC" shape=diamond style=filled]
	"89_line_App_Monitor_gstGlaAnPin.s16PosLoadBuff_Scale = GlaAnpin_Load_Data_Scale_Calc(s16Volt_Comp);" -> "90_if_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] == 0"
	"92_line_u32gb_Load_Scale = 0;" [label="u32gb_Load_Scale = 0;" fillcolor="#DAE8FC" shape=box style=filled]
	"90_if_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] == 0" -> "92_line_u32gb_Load_Scale = 0;" [label=True]
	"93_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = 0;" [label="App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = 0;" fillcolor="#DAE8FC" shape=box style=filled]
	"92_line_u32gb_Load_Scale = 0;" -> "93_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = 0;" [label=""]
	"96_else" [label=else fillcolor="#F8CECC" shape=diamond style=filled]
	"90_if_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] == 0" -> "96_else" [label=False]
	"98_line_u32gb_Load_Scale = ((App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] + App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_1) * App_Monitor_gstGlaAnPin.s16PosLoadBuff_Scale);" [label="u32gb_Load_Scale = ((App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] + App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_1) * App_Monitor_gstGlaAnPin.s16PosLoadBuff_Scale);" fillcolor="#DAE8FC" shape=box style=filled]
	"96_else" -> "98_line_u32gb_Load_Scale = ((App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] + App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_1) * App_Monitor_gstGlaAnPin.s16PosLoadBuff_Scale);" [label=True]
	"99_line_u16CalcData = (u32gb_Load_Scale / 1000) + App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_2;" [label="u16CalcData = (u32gb_Load_Scale / 1000) + App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_2;" fillcolor="#DAE8FC" shape=box style=filled]
	"98_line_u32gb_Load_Scale = ((App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_BuffNew[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] + App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_1) * App_Monitor_gstGlaAnPin.s16PosLoadBuff_Scale);" -> "99_line_u16CalcData = (u32gb_Load_Scale / 1000) + App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_2;" [label=""]
	"100_if_u16CalcData >= 255" [label="u16CalcData >= 255" fillcolor="#F8CECC" shape=diamond style=filled]
	"99_line_u16CalcData = (u32gb_Load_Scale / 1000) + App_Monitor_gstGlaAnPin.s16PosLoadBuff_Offset_2;" -> "100_if_u16CalcData >= 255"
	"102_line_u16CalcData = 255;" [label="u16CalcData = 255;" fillcolor="#DAE8FC" shape=box style=filled]
	"100_if_u16CalcData >= 255" -> "102_line_u16CalcData = 255;" [label=True]
	"105_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = u16CalcData;" [label="App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = u16CalcData;" fillcolor="#DAE8FC" shape=box style=filled]
	"100_if_u16CalcData >= 255" -> "105_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = u16CalcData;" [label=False]
	"102_line_u16CalcData = 255;" -> "105_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = u16CalcData;" [label=""]
	"108_line_App_Monitor_gstGlaAnPin.s16PosLoadSum_CH_A = 0;" [label="App_Monitor_gstGlaAnPin.s16PosLoadSum_CH_A = 0;" fillcolor="#DAE8FC" shape=box style=filled]
	"93_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = 0;" -> "108_line_App_Monitor_gstGlaAnPin.s16PosLoadSum_CH_A = 0;" [label=False]
	"105_line_App_Monitor_gstGlaAnPin.s8PosLoad_CH_A_Calc_Buff[(App_Monitor_gstGlaAnPin.u16PosLoadAddr - gbAddrUpdate)] = u16CalcData;" -> "108_line_App_Monitor_gstGlaAnPin.s16PosLoadSum_CH_A = 0;" [label=""]
	"108_line_App_Monitor_gstGlaAnPin.s16PosLoadSum_CH_A = 0;" -> "73_for_init_Seq++"
	"111_line_gbAddrUpdate = 0;" [label="gbAddrUpdate = 0;" fillcolor="#DAE8FC" shape=box style=filled]
	"73_for_init_Seq < gbSeqVariable" -> "111_line_gbAddrUpdate = 0;" [label=False]
	"112_line_App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev = App_Monitor_gstGlaAnPin.u16PosLoadAddr;" [label="App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev = App_Monitor_gstGlaAnPin.u16PosLoadAddr;" fillcolor="#DAE8FC" shape=box style=filled]
	"111_line_gbAddrUpdate = 0;" -> "112_line_App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev = App_Monitor_gstGlaAnPin.u16PosLoadAddr;" [label=""]
	"119_line_PosLoadInitEnablePrv = App_Monitor_gstGlaAnPin.u8PosLoadInitEnable;" [label="PosLoadInitEnablePrv = App_Monitor_gstGlaAnPin.u8PosLoadInitEnable;" fillcolor="#DAE8FC" shape=box style=filled]
	"5_if_App_Monitor_gstGlaAnPin.u8PosLoadInitEnable == HIGH" -> "119_line_PosLoadInitEnablePrv = App_Monitor_gstGlaAnPin.u8PosLoadInitEnable;" [label=False]
	"112_line_App_Monitor_gstGlaAnPin.u16PosLoadAddrPrev = App_Monitor_gstGlaAnPin.u16PosLoadAddr;" -> "119_line_PosLoadInitEnablePrv = App_Monitor_gstGlaAnPin.u8PosLoadInitEnable;" [label=""]
}
